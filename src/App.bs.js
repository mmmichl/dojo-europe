// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Marker$MyProjectName = require("./Marker.bs.js");
var Markers$MyProjectName = require("./Markers.bs.js");
var Geography$MyProjectName = require("./Geography.bs.js");
var Geographies$MyProjectName = require("./Geographies.bs.js");
var PostLocation$MyProjectName = require("./PostLocation.bs.js");
var ComposableMap$MyProjectName = require("./ComposableMap.bs.js");
var ZoomableGroup$MyProjectName = require("./ZoomableGroup.bs.js");

var component = ReasonReact.statelessComponent("Hello");

var geographyStyles = {
  default: {
    outline: "none",
    fill: "#ECEFF1",
    stroke: "#607D8B",
    strokeWidth: "0.75"
  },
  hover: {
    outline: "none",
    fill: "#607D8B",
    stroke: "#607D8B",
    strokeWidth: "0.75"
  },
  pressed: {
    outline: "none",
    fill: "#FF5722",
    stroke: "#607D8B",
    strokeWidth: "0.75"
  }
};

var markerStyles = {
  default: {
    fill: "papayawhip",
    stroke: "#607D8B",
    strokeWidth: "0.75"
  },
  hover: {
    fill: "#999"
  },
  pressed: {
    fill: "#000"
  }
};

function make(locations, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              console.log(locations);
              var projectionConfig = {
                scale: 205,
                rotation: /* array */[
                  -11,
                  0,
                  0
                ]
              };
              return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, ComposableMap$MyProjectName.make(projectionConfig, /* None */0, /* None */0, /* array */[ReasonReact.element(/* None */0, /* None */0, ZoomableGroup$MyProjectName.make(/* None */0, /* array */[
                                            ReasonReact.element(/* None */0, /* None */0, Geographies$MyProjectName.make(/* None */0, "../world-50m.json", /* array */[(function (geographies, projection) {
                                                          return $$Array.mapi((function (i, geography) {
                                                                        return ReasonReact.element(/* Some */[String(i)], /* None */0, Geography$MyProjectName.make(geography, projection, geographyStyles, /* array */[]));
                                                                      }), geographies);
                                                        })])),
                                            ReasonReact.element(/* None */0, /* None */0, Markers$MyProjectName.make(/* array */[$$Array.mapi((function (i, user) {
                                                              var match = user[/* location */1];
                                                              var marker = {
                                                                coordinates: /* array */[
                                                                  match[1],
                                                                  match[0]
                                                                ]
                                                              };
                                                              return ReasonReact.element(/* Some */[String(i)], /* None */0, Marker$MyProjectName.make(marker, markerStyles, /* array */[
                                                                              React.createElement("circle", {
                                                                                    cx: "0",
                                                                                    cy: "0",
                                                                                    r: "5px"
                                                                                  }),
                                                                              React.createElement("text", {
                                                                                    style: {
                                                                                      fontFamily: "Roboto, sans-serif",
                                                                                      fontSize: "0.25rem",
                                                                                      fill: "#607D8B",
                                                                                      strokeWidth: "0"
                                                                                    },
                                                                                    textAnchor: "middle",
                                                                                    y: "8px"
                                                                                  }, user[/* username */0])
                                                                            ]));
                                                            }), locations)]))
                                          ]))])), React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, PostLocation$MyProjectName.make(/* array */[]))));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.geographyStyles = geographyStyles;
exports.markerStyles = markerStyles;
exports.make = make;
/* component Not a pure module */
